////////////////////////////////////////////////////////////////////
// A simple power generation problem loosely modeled on the 
// problem of unit commitment.
//
// A number of power producers cooperate to meet daily demand that 
// fluctuates according to the maximum temperature on a given day.
// A cost is incurred for every unit of power produced and income
// is received for every unit consumed by the demand.  There 
// is a large penalty for failing to meet demand on a given
// day and there are per-power plant penalties for deviating from 
// the previous day's production at each plant -- some plants
// must pay higher operating costs for changes in production.
// Power generation is in integer units, consumption is real,
// and time steps are assumed to span 24 hours.       
//
// Some issues that could be addressed in more complex models
// (power line load limits and losses, uncertainty and constraints
// in production by source -- thermal, nuclear, renewables)
// are discussed here:
//
//   http://en.wikipedia.org/wiki/Power_system_simulation  
//
// This version is in RDDL 2.0 format.
//
// Author: Scott Sanner (ssanner@gmail.com)
//
////////////////////////////////////////////////////////////////////
domain power_gen {

	types {
		plant : object;
	};
	
	pvariables { 
    	
		// Constants
		PROD-UNITS-MIN(plant)      : { non-fluent, real,  default = 0.0  };
		PROD-UNITS-MAX(plant)      : { non-fluent, real,  default = 10.0  };
		PROD-CHANGE-PENALTY(plant) : { non-fluent, real, default = 1.0 };
		COST-PER-UNIT(plant)       : { non-fluent, real, default = 5.0 };
		INCOME-PER-UNIT            : { non-fluent, real, default = 8.0 };
		TEMP-VARIANCE              : { non-fluent, real, default = 5.0 };
		DEMAND-EXP-COEF            : { non-fluent, real, default = 0.01 };
		MIN-DEMAND-TEMP            : { non-fluent, real, default = 11.7 };
		MIN-CONSUMPTION            : { non-fluent, real, default = 2 };
		UNFULFILLED-DEMAND-PENALTY : { non-fluent, real, default = 1000.0 };

    	// Action - int
		curProd(plant) : { action-fluent, real, default = 0.0 };

		// State - int and real
		prevProd(plant) : { state-fluent, real, default = 0.0 };
		temperature     : { state-fluent, real, default = 20 };
		
		// Derived and intermediate
		demand          : { interm-fluent, real };
		fulfilledDemand : { interm-fluent,  real };

	};
	
	cpfs {

		// State
		prevProd'(?p) = curProd(?p);
		temperature'  = Normal(temperature, TEMP-VARIANCE);
		
		// Demand -- a function of the current temperature,
		//           empirically a U-shaped function with a minimum
		//           at 11.7 C, here we use a simple quadratic model.
		demand = MIN-CONSUMPTION + DEMAND-EXP-COEF * pow[ temperature - MIN-DEMAND-TEMP , 2 ];
		fulfilledDemand = min[ demand, (sum_{?p : plant} curProd(?p)) ];

	};
  
	// cost of supply per plant, demand income, demand exceeds supply penalty, steady-state penalties
	reward = [-(sum_{?p : plant} curProd(?p) * COST-PER-UNIT(?p))]
		     + (fulfilledDemand * INCOME-PER-UNIT)
		     - (if (demand > fulfilledDemand) then UNFULFILLED-DEMAND-PENALTY else 0.0 )
		     + (sum_{?p : plant} abs[ curProd(?p) - prevProd(?p) ] * PROD-CHANGE-PENALTY(?p) );
	
	action-preconditions {

		// Production amounts within bounds 
		forall_{?p : plant} [ curProd(?p) >= PROD-UNITS-MIN(?p) ];
		forall_{?p : plant} [ curProd(?p) <= PROD-UNITS-MAX(?p) ];
	};
}
