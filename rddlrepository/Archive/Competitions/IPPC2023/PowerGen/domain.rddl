////////////////////////////////////////////////////////////////////
// A simple continuous power generation problem loosely modeled on the
// problem of unit commitment.
//
// A number of power producers cooperate to meet daily demand that
// fluctuates according to the maximum temperature on a given day.
// A cost is incurred for every unit of power produced and income
// is received for every amount consumed by the demand.  There
// is a large penalty for failing to meet demand on a given
// day and there are per-power plant penalties for deviating from
// the previous day's production at each plant -- some plants
// must pay higher operating costs for changes in production.
// Power generation is in integer units, consumption is real,
// and time steps are assumed to span 24 hours.
//
// Some issues that could be addressed in more complex models
// (power line load limits and losses, uncertainty and constraints
// in production by source -- thermal, nuclear, renewables)
// are discussed here:
//
//   http://en.wikipedia.org/wiki/Power_system_simulation
//
// This version is in RDDL 2.0 format.
//
// Author: Scott Sanner (ssanner@gmail.com)
//
// Changes to continuous problem by Ayal Taitler and commitment
// added by Mike Gimelfarb.
//
////////////////////////////////////////////////////////////////////
domain power_gen {

	types {
		plant : object;
	};

	pvariables {

		// Constants
		PROD-UNITS-MIN(plant)      : { non-fluent, real, default = 1.0   };
		PROD-UNITS-MAX(plant)      : { non-fluent, real, default = 10.0  };
		PROD-CHANGE-PENALTY(plant) : { non-fluent, real, default = 1.0 };
		TURN-ON-COST(plant)        : { non-fluent, real, default = 0.0 };
		COST-PER-UNIT(plant)       : { non-fluent, real, default = 5.0 };
		INCOME-PER-UNIT            : { non-fluent, real, default = 8.0 };
		TEMP-VARIANCE              : { non-fluent, real, default = 5.0 };
		TEMP-MIN                   : { non-fluent, real, default = -30.0 };
		TEMP-MAX                   : { non-fluent, real, default = 40.0 };
		DEMAND-EXP-COEF            : { non-fluent, real, default = 0.01 };
		MIN-DEMAND-TEMP            : { non-fluent, real, default = 11.7 };
		MIN-CONSUMPTION            : { non-fluent, real, default = 2 };
		UNFULFILLED-DEMAND-PENALTY : { non-fluent, real, default = 1000.0 };
		PROD-SHAPE(plant)    : { non-fluent, real, default = 1.0 };
		PROD-SCALE(plant)    : { non-fluent, real, default = 0.0000001 };
		
    	// Action - int
		curProd(plant) : { action-fluent, real, default = 0 };

		// State - int and real
		prevProd(plant) : { state-fluent, real, default = 0 };
		prevOn(plant) : { state-fluent, bool, default = false };
		temperature     : { state-fluent, real, default = 20 };

		// Derived and intermediate
		demand          : { interm-fluent, real };
		fulfilledDemand : { interm-fluent, real };
		effectiveProd(plant) : { interm-fluent, real };
		curOn(plant) : { interm-fluent, bool };
	};

	cpfs {

		// State - now prod is zeroed if not on
		curOn(?p) = (curProd(?p) >= PROD-UNITS-MIN(?p));
		effectiveProd(?p) = if (curOn(?p)) 
			then max[min[curProd(?p) + Weibull(PROD-SHAPE(?p), PROD-SCALE(?p)), 
				PROD-UNITS-MAX(?p)], PROD-UNITS-MIN(?p)]
			else 0.0;
		prevProd'(?p) = effectiveProd(?p);
		prevOn'(?p) = curOn(?p);
		temperature'  = max[min[Normal(temperature, TEMP-VARIANCE), TEMP-MAX], TEMP-MIN];

		// Demand -- a function of the current temperature,
		//           empirically a U-shaped function with a minimum
		//           at 11.7 C, here we use a simple quadratic model.
		demand = MIN-CONSUMPTION + DEMAND-EXP-COEF * pow[ temperature - MIN-DEMAND-TEMP , 2 ];
		fulfilledDemand = min[ demand, (sum_{?p : plant} effectiveProd(?p)) ];
	};

	// cost of supply per plant, demand income, demand exceeds supply penalty, steady-state penalties
	// now includes cost of turning on a plant 
	reward = [-(sum_{?p : plant} effectiveProd(?p) * COST-PER-UNIT(?p))]
		     + (fulfilledDemand * INCOME-PER-UNIT)
		     - (if (demand > fulfilledDemand) then UNFULFILLED-DEMAND-PENALTY else 0.0 )
		     + (sum_{?p : plant} abs[ effectiveProd(?p) - prevProd(?p) ] * PROD-CHANGE-PENALTY(?p) )
			 - (sum_{?p : plant} [if (~prevOn(?p) ^ curOn(?p)) then TURN-ON-COST(?p) else 0.0] );

	action-preconditions {

		// Production amounts within bounds
		forall_{?p : plant} [ curProd(?p) >= 0.0 ];
		forall_{?p : plant} [ curProd(?p) <= PROD-UNITS-MAX(?p) ];
	};
}